// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  googleId    String   @unique
  email       String   @unique
  name        String?
  avatarUrl   String?
  createdAt   DateTime @default(now())

  plants       Plant[]
  tags         Tag[]
  notifications NotificationLog[]
  settings     UserSettings?
  sentGifts    PlantGift[] @relation("GiftSender")
  receivedGifts PlantGift[] @relation("GiftReceiver")
}

model Plant {
  id              String        @id @default(uuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  petName         String?
  botanicalName   String?
  commonName      String?
  type            String?
  acquisitionDate DateTime?
  city            String?
  careLevel       Json?         // Either string or detailed object
  sunRequirements Json?         // Either string or detailed object
  toxicityLevel   Json?         // Either string or detailed object
  petFriendliness Json?         // { isFriendly: boolean, reason: string }
  commonPestsAndDiseases String?
  preventiveMeasures String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isGifted        Boolean       @default(false) // Track if plant has been gifted

  tasks           PlantTask[]
  tags            PlantTag[]
  notes           Note[]
  photos          Photo[]
  trackingUpdates PlantTracking[]
  gift            PlantGift?
}

model TaskTemplate {
  id                  String   @id @default(uuid())
  key                 String   @unique
  label               String
  colorHex            String
  defaultFrequencyDays Int
}

model PlantTask {
  id                     String   @id @default(uuid())
  plantId                String
  plant                  Plant    @relation(fields: [plantId], references: [id])
  taskKey                String
  frequencyDays          Int
  nextDueOn              DateTime
  lastCompletedOn        DateTime?
  active                 Boolean   @default(true)
  googleCalendarEventId  String?   // Store Google Calendar event ID for updates
}

model Tag {
  id      String   @id @default(uuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  name    String
  colorHex String?

  plants  PlantTag[]
}

model PlantTag {
  plantId String
  tagId   String

  plant   Plant @relation(fields: [plantId], references: [id])
  tag     Tag   @relation(fields: [tagId], references: [id])

  @@id([plantId, tagId])
}

model Note {
  id        String   @id @default(uuid())
  plantId   String
  plant     Plant    @relation(fields: [plantId], references: [id])
  taskKey   String?
  body      String
  preset    Preset?
  createdAt DateTime @default(now())
}

enum Preset {
  STRESSED
  NEEDS_PRUNING
  FERTILIZER_DUE
  PEST_ISSUE
}

model Photo {
  id              String   @id @default(uuid())
  plantId         String
  plant           Plant    @relation(fields: [plantId], references: [id])
  cloudinaryPublicId String
  secureUrl       String
  takenAt         DateTime
  pointsAwarded   Int      @default(0)
}

model PlantTracking {
  id                  String   @id @default(uuid())
  plantId             String
  plant               Plant    @relation(fields: [plantId], references: [id])
  date                String
  note                String
  photoUrl            String?  // Optimized URL for display
  originalPhotoUrl    String?  // Original URL for AI processing
  cloudinaryPublicId  String?
  createdAt           DateTime @default(now())
}

model NotificationLog {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  payloadJson String
  sentAt    DateTime @default(now())
  channel   Channel
}

enum Channel {
  WEB_PUSH
}

model UserSettings {
  id               String   @id @default(uuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id])
  persona          Persona
  timezone         String
  onesignalPlayerId String?
  
  // Google Calendar sync settings
  googleCalendarSyncEnabled Boolean @default(false)
  googleCalendarAccessToken String?
  googleCalendarRefreshToken String?
  googleCalendarTokenExpiry DateTime?
  googleCalendarReminderMinutes Int @default(30) // Default 30 minutes before
  syncedPlantIds String[] @default([]) // Array of plant IDs to sync
  
  // Tutorial state
  tutorialCompleted Boolean @default(false)
  tutorialCompletedSteps String[] @default([]) // Array of completed tutorial step IDs
  tutorialSkippedSteps String[] @default([]) // Array of skipped tutorial step IDs
}

enum Persona {
  PRIMARY
  SECONDARY
  TERTIARY
}

model PlantGift {
  id              String   @id @default(uuid())
  plantId         String   @unique
  plant           Plant    @relation(fields: [plantId], references: [id])
  senderId        String
  sender          User     @relation("GiftSender", fields: [senderId], references: [id])
  receiverId      String?
  receiver        User?    @relation("GiftReceiver", fields: [receiverId], references: [id])
  giftToken       String   @unique @default(cuid()) // Unique token for gift link
  status          GiftStatus @default(PENDING)
  message         String?  // Optional message from sender
  createdAt       DateTime @default(now())
  acceptedAt      DateTime?
  expiresAt       DateTime? // Optional expiration date
}

enum GiftStatus {
  PENDING    // Gift created but not yet accepted
  ACCEPTED   // Gift has been accepted by receiver
  EXPIRED    // Gift link has expired
  CANCELLED  // Gift was cancelled by sender
}

